using System.ComponentModel.DataAnnotations.Schema;
using System.Reflection.Metadata.Ecma335;
using System;
using System.Xml.Xsl;
using System.Transactions;
using System.Numerics;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.ComponentModel;

public class PlayerController : MonoBehaviour
{
    //><movement vairables
    public float maxSpeed;

    //><jumping variables
    bool grounded = false;
    float groundCheckRadius = 0.2f;
    public LayerMask groundLayer;
    public Transform groundCheck;
    public float jumpHeight;

    Rigidbody2D myRB;
    Animator myAnim;
    bool facingRight;

    //><shooting variables
    public Transform gunTip;
    public GameObject bullet;
    float fireRate = 0.5f;
    float nextFire = 0f;
    
    // ><Start is called before the first frame update
    void Start() {
        myRB = GetComponent<Rigidbody2D>();
        myAnim = GetComponent<Animator>();

        facingRight = true;
    }

    // ><Update is called once per frame

    void Update(){
        //><player jumping
        if(grounded && Input.GetAxis("Jump")>0){
            grounded = false;
            myAnim.SetBool("isGrounded",grounded);
            myRB.AddForce(new UnityEngine.Vector2(0,jumpHeight));
            }

        //><player shooting
        if(Input.GetAxisRaw("Fire1")>0) fireRocket();    
    }   
    
    // ><FixedUpdate is called when needed
    void FixedUpdate(){

        //><check if we are on the ground, if no then we are falling
        grounded = Physics2D.OverlapCircle(groundCheck.position,groundCheckRadius,groundLayer);
        myAnim.SetBool("isGrounded",grounded);

        myAnim.SetFloat ("verticalSpeed",myRB.velocity.y);

        float move = Input.GetAxis("Horizontal");
        myAnim.SetFloat("speed", MathF.Abs(move));

        myRB.velocity = new UnityEngine.Vector2(move*maxSpeed,myRB.velocity.y);

        if(move > 0 && !facingRight){
            flip();
        } else if(move < 0 && facingRight){
            flip();
        }    
    }
    void flip(){
        facingRight=!facingRight;
        UnityEngine.Vector3 theScale = transform.localScale;
        theScale.x *= -1;
        transform.localScale = theScale;
    }

    void fireRocket(){
        if(TimeOnly.time > nextFire){
            nextFire = TimeOnly.time+fireRate;
            if(facingRight){
                Instantiate(bullet, gunTip.position, Quaternion.Euler (new UnityEngine.Vector3 (0,0,0)));
            }else if(!facingRight){
                Instantiate(bullet, gunTip.position, Quaternion.Euler (new UnityEngine.Vector3 (0,0,180f)));
            }
        }
    }

}
